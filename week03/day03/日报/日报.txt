2020.6.18日报
关闭超时订单
       定义job扫描订单表：
        ​修改订单的状态为关闭状态、结束时间、关闭时间、修改时间为当前时间
        ​把订单中商品的库存数量加回去
        ​扫描条件：状态是未付款 并且 创建时间 <= 当前时间 – 2天  并且付款方式为在线支付的订单
       TbOrderMapper.xml：
          <select id="selectOvertimeOrder" resultMap="BaseResultMap">
              SELECT
                  *
              FROM
                  tb_order
              WHERE
                  create_time &lt;= DATE_SUB(NOW(), INTERVAL 2 DAY)
              AND status = 1
              AND payment_type = 1
          </select>
       usian_order_service：
            //关闭超时订单
            @Override
            public void updateOverTimeTbOrder(TbOrder tbOrder) {
                 tbOrder.setStatus(6);
                 Date date = new Date();
                 tbOrder.setCloseTime(date);
                 tbOrder.setEndTime(date);
                 tbOrder.setUpdateTime(date);
                 tbOrderMapper.updateByPrimaryKeySelective(tbOrder);
             }
       usian_order_quartz:
             @Override
             public void execute(JobExecutionContext context) throws JobExecutionException {
                   //1、查询超时订单
                   List<TbOrder> tbOrderList = orderService.selectOverTimeTbOrder();

                   //2、关闭超时订单
                   for (int i = 0; i < tbOrderList.size(); i++) {
                        TbOrder tbOrder =  tbOrderList.get(i);
                        orderService.updateOverTimeTbOrder(tbOrder);
                   //3、把超时订单中的商品库存数量加回去
                   orderService.updateTbItemByOrderId(tbOrder.getOrderId());
                        }
                    }
       usian_order_config:
            	@Bean
            	public JobDetailFactoryBean jobDetailFactoryBean(){
            		JobDetailFactoryBean factory = new JobDetailFactoryBean();
            		//关联我们自己的Job类
            		factory.setJobClass(OrderQuartz.class);
            		return factory;
            	}

               @Bean
            	public CronTriggerFactoryBean cronTriggerFactoryBean(JobDetailFactoryBean
                                                                     jobDetailFactoryBean){
            		CronTriggerFactoryBean factory = new CronTriggerFactoryBean();
            		factory.setJobDetail(jobDetailFactoryBean.getObject());
            		//设置触发时间
            		//factory.setCronExpression("0/2 * * * * ?");
            	    factory.setCronExpression("0 */1 * * * ?");
            		return factory;
            	}

            	@Bean
            	public SchedulerFactoryBean schedulerFactoryBean(CronTriggerFactoryBean
            					cronTriggerFactoryBean, MyAdaptableJobFactory myAdaptableJobFactory){
            		SchedulerFactoryBean factory = new SchedulerFactoryBean();
            		//关联trigger
            		factory.setTriggers(cronTriggerFactoryBean.getObject());
            		factory.setJobFactory(myAdaptableJobFactory);
            		return factory;
            	}
quartz集群任务重复执行问题
        使用redis分布式锁解决quartz 集群任务重复执行的问题
	判断（setnx（key，value，time））del（删除锁）
            //关闭超时订单
        	@Override
        	public void execute(JobExecutionContext context) throws JobExecutionException {
        		String ip = null;
        		try {
        			ip = InetAddress.getLocalHost().getHostAddress();
        		} catch (UnknownHostException e) {
        			e.printStackTrace();
        		}
        		//解决quartz集群任务重复执行
        		if(redisClient.setnx("SETNX_LOCK_ORDER_KEY",ip,30)) {
        			//... ... ... 关闭超时订单业务
        			redisClient.del("SETNX_LOCK_ORDER_KEY");
        		}else{
        			System.out.println(
                        "============机器："+ip+" 占用分布式锁，任务正在执行=======================");
        		}

        	}
        }